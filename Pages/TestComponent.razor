@page "/"
@implements IDisposable
@using System.Diagnostics
@inject ICategoryRepository _categoryRepository
@inject ISymbolRepository _symbolRepository

<CategoryShower SelectedCategoriesChanged="@OnCategoriesChanged"></CategoryShower>

@if (_currentSymbol is not null)
{
    <h2>@_currentSymbol.JapaneseSymbol</h2>
}

<input type="text" @bind="_inputText" @bind:event="oninput"
       @onkeydown="async ea => await KeyDown(ea)"/>

<button type="button" class="btn btn-primary" @onclick="Guess">@(_currentSymbol is null ? "Start" : "Guess")</button>

<h3>@_text</h3>

@code {
    private List<CategoryViewModel> _includedCategories = new();
    private string _inputText = "";
    private Symbol _currentSymbol;
    private string _text = "";

    private void OnCategoriesChanged(List<CategoryViewModel> categories)
    {
        _includedCategories = categories;
    }

    private async Task<IList<Symbol>> GetAllSymbols()
    {
        var symbols = new List<Symbol>();
        foreach (var category in _includedCategories)
        {
            foreach (var symbol in await _categoryRepository.GetSymbolsInCategory(category.Name))
            {
                symbols.Add(symbol);
            }
        }
        return symbols;
    }

    public void Dispose()
    {
        _symbolRepository.Dispose();
    }

    private async Task KeyDown(KeyboardEventArgs ea)
    {
        if (ea.Code == "Enter")
        {
            await Guess();
        }
    }

    private async Task Guess()
    {
        if (_includedCategories.Count == 0)
        {
            return;
        }
        
        if (_currentSymbol is null)
        {
            _currentSymbol = await RandomSymbol();
            return;
        }

        if (_inputText.Trim().ToLower() == _currentSymbol.RomanizedSymbol)
        {
            _currentSymbol = await RandomSymbol();
            _text = "Esatto!";
        } else
        {
            _text = "Sbagliato! :(";
        }
        _inputText = "";
    }

    private async Task<Symbol> RandomSymbol()
    {
        return (await GetAllSymbols()).Random();
    }

}
